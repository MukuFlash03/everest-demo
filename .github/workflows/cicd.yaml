name: cicd

on:
  # TODO: Remove [automate-tests-actions, automate-tests-merge, automate-tests-2] branch once changes are final
  pull_request:
    branches: [ main, automate-tests-merge ]
  push:
    branches: [ main ]
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  docker-build-and-push-images:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        include:
          # - host_namespace: ghcr.io/everest/everest-demo
          #   image_name: manager
          #   context: ./manager
          - host_namespace: ghcr.io/everest/everest-demo
            image_name: mqtt-server
            context: ./mosquitto
          - host_namespace: ghcr.io/everest/everest-demo
            image_name: nodered
            context: ./nodered

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure Docker image version is not referencing an existing release
        id: docker-image-version-check
        shell: bash
        run: |
          if ! [[ -s '.env'  ]]; then
            echo 'Error: No .env file found.'
            exit 1
          fi

          if ! grep -qE '^TAG=' .env; then
            echo 'Error: .env must contain a TAG variable.'
            exit 1
          fi

          source .env

          # Fail if any previous Docker image version value matches the one in
          # this PR (excluding the current image version).
          for commit in $(git --no-pager log --first-parent --format=%H -- .env | tail -n +2); do
            if git --no-pager grep -hF "${TAG}" $commit -- .env | grep -qx ${TAG}; then
              echo 'Error: The version in .env matches an'
              echo '       earlier version on main. Please update the value in'
              echo '       .env to a new version.'
              exit 1
            fi
          done

          if git show-ref --tags --verify --quiet "refs/tags/v${TAG}"; then
            echo "Error: The tag 'v${TAG}' is already a GitHub release."
            echo '       Please update the version in .env'
            exit 1
          else
            echo "TAG=${TAG}" >> "${GITHUB_OUTPUT}"
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set Docker image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.host_namespace }}/${{ matrix.image_name }}
          tags: |
            type=semver,pattern={{version}},value=v${{ steps.docker-image-version-check.outputs.TAG }}

      - name: Log into GitHub container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.image_name }}
          cache-to: type=gha,mode=max,scope=${{ matrix.image_name }}

      - name: Write Matrix Build Parameters to Output
        uses: cloudposse/github-action-matrix-outputs-write@v1
        id: matrix-write
        with:
          matrix-step-name: ${{ github.job }}
          matrix-key: ${{ matrix.image_name }}
          outputs: |
            host_namespace: ${{ matrix.host_namespace }}
            image: ${{ matrix.image_name }}
            context: ${{ matrix.context }}
            tags_labels: ${{ fromJSON(steps.meta.outputs.json) }}

      - name: Print meta JSON
        run: |
          echo "meta step JSON output values: ${{ fromJSON(steps.meta.outputs.json) }}"
          echo "meta step JSON tags values: ${{ fromJSON(steps.meta.outputs.json).tags }}"
          echo "meta step JSON labels values: ${{ fromJSON(steps.meta.outputs.json).labels }}"

  ## Read matrix outputs 
  read-matrix-build-parameters:
    runs-on: ubuntu-latest
    needs: [docker-build-and-push-images]
    steps:
      - uses: cloudposse/github-action-matrix-outputs-read@v1
        id: matrix-read
        with:
          matrix-step-name: docker-build-and-push-images

      - name: Print matrix read values
        run: |
          echo "Matrix values result: ${{ steps.matrix-read.outputs.result }}"
          echo "FromJSON Matrix values result: ${{ fromJson(steps.matrix-read.outputs.result) }}"

    outputs:
      result: "${{ steps.matrix-read.outputs.result }}"


  run-demo-automated-test:
    needs: [docker-build-and-push-images, read-matrix-build-parameters]
    runs-on: ubuntu-latest

    env:
      MATRIX_PARAMETERS: ${{ fromJson(needs.read-matrix-build-parameters.outputs.result) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0


      - name: Print Matrix Build Parameters
        run: |
          echo "Entire matrix parameters: ${{ env.MATRIX_PARAMETERS }}"

      - name: List Docker images
        run: docker images

      - name: Run automated test script
        timeout-minutes: 30
        run: bash demo-automated-testing.sh 
